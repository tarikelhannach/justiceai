# docker-compose.production.yml - Configuración de Producción para Marruecos

version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: justicia_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app1
      - app2
      - app3
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application Instances
  app1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_app1
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - HSM_TYPE=${HSM_TYPE}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/app:/app/logs
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  app2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_app2
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - HSM_TYPE=${HSM_TYPE}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/app:/app/logs
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  app3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_app3
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - HSM_TYPE=${HSM_TYPE}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/app:/app/logs
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: justicia_postgres
    environment:
      - POSTGRES_DB=justicia_prod
      - POSTGRES_USER=justicia
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U justicia -d justicia_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: justicia_redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: justicia_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    networks:
      - justicia_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Celery Worker - CPU Intensive
  celery_cpu:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_celery_cpu
    command: celery -A app.celery worker --loglevel=info --queues=cpu_intensive --concurrency=2
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./uploads:/app/uploads
      - ./logs/celery:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Celery Worker - I/O Bound
  celery_io:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_celery_io
    command: celery -A app.celery worker --loglevel=info --queues=io_bound --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./uploads:/app/uploads
      - ./logs/celery:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: justicia_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://justicia:${DB_PASSWORD}@postgres:5432/justicia_prod
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs/celery:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: justicia_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: justicia_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Log Management - Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: justicia_fluentd
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/app:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    restart: unless-stopped
    networks:
      - justicia_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  justicia_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
